name: Validate Multi-language Solutions

on:
  pull_request:
    paths:
      - "problems/**"

jobs:
  detect-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            problems/**

      - name: Get changed Python files
        id: python-changes
        uses: tj-actions/changed-files@v44
        with:
          files: "**/*.py"

      - name: Get changed JavaScript files
        id: js-changes
        uses: tj-actions/changed-files@v44
        with:
          files: "**/*.js"

      - name: Get changed Java files
        id: java-changes
        uses: tj-actions/changed-files@v44
        with:
          files: "**/*.java"

      - name: Get changed C++ files
        id: cpp-changes
        uses: tj-actions/changed-files@v44
        with:
          files: "**/*.cpp"

      - name: Get changed C files
        id: c-changes
        uses: tj-actions/changed-files@v44
        with:
          files: "**/*.c"

      - name: Set up Python (for Python tests)
        if: steps.python-changes.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install test dependencies (Python)
        if: steps.python-changes.outputs.any_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run Python Tests
        if: steps.python-changes.outputs.any_changed == 'true'
        id: test_python
        run: |
          find problems -type d -name '__tests__' -exec bash -c 'for d; do pytest "$d"; done' _ {} +

      - name: Set up Node.js (for JavaScript tests)
        if: steps.js-changes.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run JavaScript Tests
        if: steps.js-changes.outputs.any_changed == 'true'
        id: test_js
        run: |
          find problems -type f -name '*.test.js' -exec node {} +

      - name: Set up Java (for Java tests)
        if: steps.java-changes.outputs.any_changed == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Run Java Tests
        if: steps.java-changes.outputs.any_changed == 'true'
        id: test_java
        run: |
          find problems -type f -name '*.java' | while read file; do
            javac "$file" && java "${file%.java}"
          done

      - name: Run C++ Tests
        if: steps.cpp-changes.outputs.any_changed == 'true'
        id: test_cpp
        run: |
          find problems -type f -name '*.cpp' | while read file; do
            g++ "$file" -o test && ./test
          done

      - name: Run C Tests
        if: steps.c-changes.outputs.any_changed == 'true'
        id: test_c
        run: |
          find problems -type f -name '*.c' | while read file; do
            gcc "$file" -o test && ./test
          done

      - name: Determine Points
        id: points
        run: |
          POINTS=0
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ "$file" == problems/easy/* ]]; then
              POINTS=$((POINTS + 10))
            elif [[ "$file" == problems/intermediate/* ]]; then
              POINTS=$((POINTS + 20))
            elif [[ "$file" == problems/hard/* ]]; then
              POINTS=$((POINTS + 30))
            fi
          done
          echo "POINTS=$POINTS" >> $GITHUB_ENV

      - name: Post test result as a PR comment
        if: always()
        uses: actions/github-script@v6
        with:
            script: |
              const prNumber = context.payload.pull_request.number;
        
              const results = {
                Python: '${{ steps.test_python.outcome || 'skipped' }}',
                JavaScript: '${{ steps.test_js.outcome || 'skipped' }}',
                Java: '${{ steps.test_java.outcome || 'skipped' }}',
                'C++': '${{ steps.test_cpp.outcome || 'skipped' }}',
                C: '${{ steps.test_c.outcome || 'skipped' }}'
              };
        
              const symbols = {
                success: '✅',
                failure: '❌',
                skipped: '⚪'
              };
        
              const comment = Object.entries(results)
                .map(([lang, result]) => `${symbols[result] || '❔'} ${lang} tests: **${result.toUpperCase()}**`)
                .join('\n');
        
              const points = process.env.POINTS || '0';
        
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `### 🧪 Test Summary\n${comment}\n\n🏅 **Total Points Earned:** ${points}`
              });
      
      - name: Write points to file
        run: |
          echo "POINTS" > .points
     
      - name: Commit points file
        env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
              git config --global user.name "github-actions[bot]"
              git config --global user.email "github-actions[bot]@users.noreply.github.com"
              git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
              git add .points
              git commit -m "Save POINTS=$POINTS" || echo "No changes to commit"
              git push || echo "Nothing to push
            
        