name: Validate Solutions

on:
  pull_request:
    paths:
      - "problems/**"

jobs:
  detect-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            problems/**

      - name: Get changed Python files
        id: python-changes
        uses: tj-actions/changed-files@v46
        with:
          files: "**/*.py"

      - name: Get changed JavaScript files
        id: js-changes
        uses: tj-actions/changed-files@v46
        with:
          files: "**/*.js"

      - name: Get changed Java files
        id: java-changes
        uses: tj-actions/changed-files@v46
        with:
          files: "**/*.java"

      - name: Get changed C++ files
        id: cpp-changes
        uses: tj-actions/changed-files@v46
        with:
          files: "**/*.cpp"

      - name: Get changed C files
        id: c-changes
        uses: tj-actions/changed-files@v46
        with:
          files: "**/*.c"

      - name: Set up Python (for Python tests)
        if: steps.python-changes.outputs.any_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install test dependencies (Python)
        if: steps.python-changes.outputs.any_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run Python Tests
        if: steps.python-changes.outputs.any_changed == 'true'
        id: test_python
        run: |
            for file in ${{ steps.python-changes.outputs.all_changed_files }}; do
              dir=$(dirname "$file")
              test_dir="$dir/__tests__"
              if [ -d "$test_dir" ]; then
                echo "✅ Found test directory: $test_dir"
                echo "🔍 Running pytest in $test_dir"
                pytest "$test_dir"
              else
                echo "⚠️ No __tests__ directory found in $dir"
              fi
            done
        
      - name: Set up Node.js (for JavaScript tests)
        if: steps.js-changes.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run JavaScript Tests
        if: steps.js-changes.outputs.any_changed == 'true'
        id: test_js
        run: |
            for file in ${{ steps.js-changes.outputs.all_changed_files }}; do
              dir=$(dirname "$file")
              test_dir="$dir/__tests__"
              echo "🔍 Checking for tests in: $test_dir"
              if [ -d "$test_dir" ]; then
                for test_file in "$test_dir"/*.js; do
                  if [ -f "$test_file" ]; then
                    echo "✅ Running JavaScript test: $test_file"
                    node "$test_file"
                  fi
                done
              else
                echo "⚠️ No __tests__ directory found in $dir"
              fi
            done
        

      - name: Set up Java (for Java tests)
        if: steps.java-changes.outputs.any_changed == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Run Java Tests
        if: steps.java-changes.outputs.any_changed == 'true'
        id: test_java
        run: |
            for file in ${{ steps.java-changes.outputs.all_changed_files }}; do
              dir=$(dirname "$file")
              test_dir="$dir/__tests__"
              if [ -d "$test_dir" ]; then
                echo "Found test directory: $test_dir"
                for test_file in "$test_dir"/Test*.java; do
                  if [ -f "$test_file" ]; then
                    echo "Running test: $test_file"
                    javac "$test_file"
        
                    root_dir=$(git rev-parse --show-toplevel)
                    relative_path="${test_file#$root_dir/}"
                    class_name="${relative_path%.java}"
                    fqcn="${class_name//\//.}"
        
                    echo "Fully qualified class: $fqcn"
                    java -cp "$root_dir" "$fqcn"
                  fi
                done
              else
                echo "⚠️ No __tests__ directory found in $dir"
              fi
            done
        
      - name: Run C++ Tests
        if: steps.cpp-changes.outputs.any_changed == 'true'
        id: test_cpp
        run: |
          for file in ${{ steps.cpp-changes.outputs.all_changed_files }}; do
            dir=$(dirname "$file")
            test_dir="$dir/__tests__"
            if [ -d "$test_dir" ]; then
              echo "Found test directory: $test_dir"
              for test_file in "$test_dir"/*.cpp; do
                if [ -f "$test_file" ]; then
                  echo "Running test: $test_file"
                  g++ "$test_file" -o test && ./test
                fi
              done
            else
              echo "⚠️ No __tests__ directory found in $dir"
              fi
          done

      - name: Run C Tests
        if: steps.c-changes.outputs.any_changed == 'true'
        id: test_c
        run: |
          for file in ${{ steps.c-changes.outputs.all_changed_files }}; do
            dir=$(dirname "$file")
            test_dir="$dir/__tests__"
            if [ -d "$test_dir" ]; then
              echo "Found test directory: $test_dir"
              for test_file in "$test_dir"/*.c; do
                if [ -f "$test_file" ]; then
                  echo "Running test: $test_file"
                  gcc "$test_file" -o test && ./test
                fi
              done
            else
              echo "⚠️ No __tests__ directory found in $dir"
            fi
          done

      - name: Post test result as a PR comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
              const prNumber = context.payload.pull_request.number;
        
              // Collect outcomes of all the test steps
              const results = [
                '${{ steps.test_python.outcome || 'skipped' }}',
                '${{ steps.test_js.outcome || 'skipped' }}',
                '${{ steps.test_java.outcome || 'skipped' }}',
                '${{ steps.test_cpp.outcome || 'skipped' }}',
                '${{ steps.test_c.outcome || 'skipped' }}'
              ];
        
              // Check if all tests passed (either success or skipped)
              const allPassed = results.every(r => r === 'success' || r === 'skipped');
        
              let body;
              if (allPassed) {
                body = '✅ **All test cases have passed, please merge your code to get points.**';
              } else {
                body = '❌ **Some tests have failed, please try again.**';
              }
        
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body
              });
        